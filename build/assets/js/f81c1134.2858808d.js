"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"agile-tech-writing-getting-started","metadata":{"permalink":"/blog/agile-tech-writing-getting-started","source":"@site/blog/getting_started_agile_technical_writing_1.md","title":"Getting Started with Agile for Technical Writers","description":"How to get started with Agile for Technical Writers","date":"2025-08-09T11:59:18.000Z","tags":[{"inline":false,"label":"Agile","permalink":"/blog/tags/agile","description":"Posts related to Agile and Scrum for Technical Documentation."}],"readingTime":4.38,"hasTruncateMarker":true,"authors":[{"name":"Ivan Walsh","title":"Technical Writer","url":"https://github.com/ivanwalsh","page":{"permalink":"/blog/authors/ivanwalsh"},"socials":{"x":"https://x.com/ivanwalsh","github":"https://github.com/ivanwalsh"},"imageURL":"https://github.com/ivanwalsh.png","key":"ivanwalsh"}],"frontMatter":{"slug":"agile-tech-writing-getting-started","title":"Getting Started with Agile for Technical Writers","authors":["ivanwalsh"],"tags":["Agile"],"description":"How to get started with Agile for Technical Writers"},"unlisted":false,"nextItem":{"title":"Using Antora to Manage Complex Technical Documentation Websites","permalink":"/blog/antora-setup"}},"content":"## How can technical writers use Agile in software development projects?\\n\\nAs this question, and variations of it, have popped up on Reddit and LinkedIn, I thought I\'d share a few observations about my experience of working with Agile/Scrum as a tech writer. \\n\\nOne thing to say before we start, is that just became a company says it\'s Agile, doesn\'t mean it\'s applying all of the framework. Rather, they may be selectively picking pieces of it, such as using Daily Stand Ups, but not fully embracing the spirit of Agile development. In many cases, they\'re probably \'Agilefall\' (Agile + Waterfall).\\n\\n\x3c!-- truncate --\x3e\\n\\n## What is Agile technical documentation?\\n\\nAgile technical documentation is a framework that applies Agile principles to the documentation process itself. Instead of creating monolithic documentation sets that may become outdated before the product is released, Agile documentation provides incremental deliverables per sprint that support current needs while remaining flexible enough to adapt with the project.\\n\\n## Agile Documentation Principles\\n\\n\\"I want thin documents, and fast.\\" The CEO of a leasing company told me this when I presented him with our Documentation Plan for the next release. This was more than 15 years ago before Agile became mainstream. He was encouraging us to write only what was needed (cut the fluff) and get docs out to review/customers asap. \\n\\nSo, if you\'re new to writing in an Agile environment, here are some things to consider: \\n\\n**Iterative content development** \u2013 create units of documentation that can be written, reviewed and signed off per sprint. Then, if the software changes, update accordingly. The aim is to get pieces of the docs delivered per 2- or 3-week sprints, rather than one single document at the very end. \\n\\n**Collaboration** \u2013 develop a collaborative approach with developers, testers and product managers, so docs are worked on during each sprint. Before you adopt this approach, talk to the team and explain how/why you plan to deliver the docs in increments.\\n\\n**Responding to change** \u2013 prepare your documents in such a way that it\'s easy to update, review, and republish. Flexibility is a key part of Agile. Make sure your document process is aligned accordingly\\n\\n## Agile Documentation Strategies\\n\\nIn terms of setting up Agile documents, you have several options. Here\'s a few to consider:\\n\\n### User story-driven content\\n\\nLearn how to write user story for the features you plan to document. Of course, you can write user stories for other document tasks as well. The point is to learn how to craft user stories so you\'re in sync with your company\'s Agile mindset, and also that each increment you deliver meets the Definition of Done. That is, it meets the problem statement and acceptance criteria for each ticket. \\n\\n### Tech Documentation user story example\\n\\nThe following is a simple example of a documentation user story:\\n\\n- **As a** new API developer integrating with our ecommerce system\\n- **I want** step-by-step authentication setup instructions with working code examples\\n- **So that** I can authenticate API calls within 15 minutes without contacting support\\n\\n**Acceptance Criteria:**\\n- Include prerequisite requirements (API key, development environment)\\n- Provide code samples in at least 3 programming languages (Python, JavaScript, cURL)\\n- Show expected request/response format with real examples\\n- Include common error codes and troubleshooting steps\\n- Include rate limiting information\\n\\n**Definition of Done:**\\n- Content reviewed by Developer who hasn\'t worked on the API\\n- Verified code examples \\n- Tested by Product team\\n\\n### Sprint-based documentation cycles\\n\\nYou have several options here. One suggestion is to add a Tech Document ticket to the Dev sprint board per sprint. For me, this creates noise and I\'d suggest to avoid it. Instead, create your own board and cut a ticket for each product feature. Then, in the last sprint, you can add a formal tech document ticket the sprint board to ensure it gets prioritized and delivered in time with the release. \\n\\n### Living documentation approaches\\n\\nIn this context, \'living\' means that the docs develop naturally with the product rather than you having to make manual updates. For instance, if you\'re using Swagger/OpenAPI specs to generate interactive API documentation, setup your document publishing system so that the correct documents are automatically generated. The same applies if you\'re integrating content from Git or database schemas generated from databases.\\n\\n### Continuous feedback loops\\n\\nSetup your docs process so that you can identify gaps, errors, and omissions in the docs. In sprint retrospectives ask product/developers if there\'s anything that can be improved. Likewise, arrange stakeholder check-ins to assess whether docs meet their needs. Ask Product to help understand customer pain points. Again, I feel a mindset change is often required here. Instead of writing in isolation, look for ways to proactively get feedback so your docs provide maximum value. \\n\\n## First Steps\\n\\nInstead of \'boiling the ocean\', I\'d suggest to start small and by degrees move your tech document team to an Agile mindset. Creating a simple Agile board either in Jira, Trello, or another tool is enough to get started. I\'d highly recommend to print out the Scrum Guide and become familiar with the framework.\\n\\nIn the coming weeks, I\'ll go into more depth about tool usage, metrics and some of the common pitfalls to avoid.\\n\\nAs always, drop me a line if you\'d like to know more. My inbox is always open."},{"id":"antora-setup","metadata":{"permalink":"/blog/antora-setup","source":"@site/blog/2025-03-09-antora.md","title":"Using Antora to Manage Complex Technical Documentation Websites","description":"Learn how to use Antora to Manage Complex Technical Documentation Websites. Includes product comparison with other static site generators","date":"2025-03-09T00:00:00.000Z","tags":[{"inline":false,"label":"Publishing","permalink":"/blog/tags/publishing","description":"Publish technical documentation"}],"readingTime":7.62,"hasTruncateMarker":true,"authors":[{"name":"Ivan Walsh","title":"Technical Writer","url":"https://github.com/ivanwalsh","page":{"permalink":"/blog/authors/ivanwalsh"},"socials":{"x":"https://x.com/ivanwalsh","github":"https://github.com/ivanwalsh"},"imageURL":"https://github.com/ivanwalsh.png","key":"ivanwalsh"}],"frontMatter":{"slug":"antora-setup","title":"Using Antora to Manage Complex Technical Documentation Websites","authors":["ivanwalsh"],"tags":["Publishing"],"description":"Learn how to use Antora to Manage Complex Technical Documentation Websites. Includes product comparison with other static site generators"},"unlisted":false,"prevItem":{"title":"Getting Started with Agile for Technical Writers","permalink":"/blog/agile-tech-writing-getting-started"},"nextItem":{"title":"Oliver Burkeman Book Review","permalink":"/blog/oliver-burkeman"}},"content":"What\'s the best tool for managing technical documentation websites?\\r\\n\\r\\nYou\'ve probably seen something like this on LinkedIn or Reddit. And the answer is, as always, \'it depends\'. \\r\\n\\r\\nFor example, this site is run on Docusaurus, which is pretty easy to setup and maintain. It also works very nicely with Git and our web hosting provider, so for a relatively simple site, it\'s fine. I should add that you can Docusaurus is not just for lightweight document sites as it has quite a lot of rich features, themes, and a very active community. So, worth a peek if you\'re looking to get started. \\r\\n\\r\\nHowever, there are a few things it doesn\'t offer. At least, not out of the box. This leads us to Antora.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n# Antora for Complex Tech Document Websites\\r\\n\\r\\nWhat\'s the best tool for managing technical documentation websites?\\r\\n\\r\\nYou\'ve probably seen something like this on LinkedIn or Reddit. And the answer is, as always, \'it depends\'. \\r\\n\\r\\nFor example, this site is run on Docusaurus, which is pretty easy to setup and maintain. It also works very nicely with Git and our web hosting provider, so for a relatively simple site, it\'s fine. I should add that you can Docusaurus is not just for lightweight document sites as it has quite a lot of rich features, themes, and a very active community. So, worth a peek if you\'re looking to get started. \\r\\n\\r\\nHowever, there are a few things it doesn\'t offer. At least, not out of the box. This leads us to Antora. \\r\\n\\r\\n## What is Antora? \\r\\n\\r\\nAntora is a static site generator designed specifically for technical documentation. Created by the team behind AsciiDoc, it treats your document set as a collection of \'versioned content sources\' rather than a traditional website structure. This allows you to setup \\"documentation sites\\" that can aggregate content from multiple repos, branches, and versions into a single website.\\r\\n\\r\\nIn other words, instead of pulling your documents from a single repo, which is what I\'m doing here, you could ingest material from X number of repos and organize them in a seamless manner on the website. \\r\\n\\r\\nVersioning is also one of its strong points. For instance, if you want to maintain multiple versions of your documentation simultaneously. You can do something like this in Docusaurus, btw. \\r\\n\\r\\n[Antora documentation](https://docs.antora.org/antora/latest/)\\r\\n\\r\\n## Antora Use Cases\\r\\n\\r\\nAs mentioned above, while you can use tools like Docusaurus, Hugo, and Sphinx, from what I\'ve seen its strength is in the following areas: \\r\\n\\r\\n### Multi-version Documentation Management\\r\\n\\r\\nOnce setup, you can maintain documentation for multiple product versions simultaneously. This allows you to pull content from different Git branches/repositories and publish them as separate versions in a single UI. \\r\\n\\r\\n### Distributed Documentation Teams\\r\\n\\r\\nIf you work on large projects or have distributed teams with multiple repos, you can aggregate the content from various sources into a single site while maintaining ownership and contribution workflows. While it does take time to configure, you\'ll see the gains in the long term.\\r\\n\\r\\n### Open Source Projects\\r\\n\\r\\nIt\'s a good fit for products that require community contributions, versioning, and integration with Git workflows.\\r\\n\\r\\n### Component-Based Architecture\\r\\n\\r\\nFor tech docs teams that work on require cross-referencing between different products and versions, you can use its component-based architecture to coordinate your content workflows. \\r\\n\\r\\nFor context, Antora\'s component-based architecture treats documentation as a collection of independent, reusable \\"components\\" rather than a monolithic website. As a result, each self-contained documentation unit can be mixed, matched, and assembled into different sites while maintaining their individual identity and versioning.\\r\\n\\r\\nEach component has:\\r\\n\\r\\n- Its own repository (or can share a repository with other components)\\r\\n- Independent versioning (version 1.0, 2.0, etc.)\\r\\n- Modular structure (modules containing pages, assets, and partials)\\r\\n- Separate navigation and content organization\\r\\n\\r\\nThe following example provides a sample layout:\\r\\n\\r\\n```\\r\\nCompany Documentation Site\\r\\n\u251c\u2500\u2500 API Gateway (Component)\\r\\n\u2502   \u251c\u2500\u2500 Version 3.0\\r\\n\u2502   \u251c\u2500\u2500 Version 2.1\\r\\n\u2502   \u2514\u2500\u2500 Version 1.5\\r\\n\u251c\u2500\u2500 User Management System (Component)\\r\\n\u2502   \u251c\u2500\u2500 Version 2.2\\r\\n\u2502   \u2514\u2500\u2500 Version 2.0\\r\\n\u2514\u2500\u2500 Analytics Dashboard (Component)\\r\\n    \u251c\u2500\u2500 Version 1.8\\r\\n    \u2514\u2500\u2500 Version 1.5\\r\\n```\\r\\n\\r\\nIn this scenario, each component lives in its own Git repo, maintained by different teams, but appears as a unified documentation site to users.\\r\\n\\r\\n## Antora Limitations\\r\\n\\r\\nThere are a few limitations that you need to be aware of. \\r\\n\\r\\n### Learning curve \\r\\n\\r\\nCompared to other tools, there is a bit of a learning curve. If you\'re familiar with static site generators, you\'ll understand how it\'s designed. However, if you\'re new to this area, it can be a bit tricky to get up and running. There\'s also a smaller community to help troubleshoot issues, which is unfortunate. Concepts (i.e. playbooks, components, modules, pages) can be overwhelming for tech writers coming from Flare/RoboHelp or less complex tech document tools. \\r\\n\\r\\n### AsciiDoc\\r\\n\\r\\nProbably the main limitation is that you need to write (or migrate) your docs in AsciiDoc. \\r\\n\\r\\nThe team who created Antora felt that tech writers need a flavor of markdown with more advanced capabilities. While Markdown is fine for simple documentation, it has limitations for more complex technical material that requires advanced formatting, conditional text, and cross-referencing. However, I suspect this puts off many tech writers and developers who are used to writing in Markdown and may be reluctant to put time aside to skill up and migrate existing markdown.  \\r\\n\\r\\n### Configuration Management \\r\\n\\r\\nIf you\'re new to SSGs, you may find the playbook configuration too complex for your sites. Troubleshooting issues regarding Antora\'s architecture and Git integration deter people from switching over. \\r\\n\\r\\n### Dynamic Features\\r\\n\\r\\nI haven\'t explored this too much but from what I understand, it lacks built-in support for features such as user authentication, commenting systems, or implementing real-time content updates without additional tooling.\\r\\n\\r\\n### Deployment Complexity\\r\\n\\r\\nDepending on your Git skill level, you may find its CI/CD pipelines and deployment strategies overly complex. \\r\\n\\r\\n### Plugin Ecosystem \\r\\n\\r\\nPart of the reason, I use Docusaurus is because there is so much choice in terms of themes, plug-ins and community support. And it\'s all in markdown which everyone knows. \\r\\n\\r\\nIn contrast, Antora has a much smaller ecosystem of plugins and extensions.\\r\\n\\r\\n## Static Site Generator Comparison\\r\\n\\r\\nThe following table identifies the strengths and weakness of Antora and some of the leading SSGs. \\r\\n\\r\\n| Feature/Aspect | **Antora** | **Docusaurus** | **GitBook** | **VuePress/VitePress** |\\r\\n|----------------|------------|----------------|-------------|------------------------|\\r\\n| **Primary Focus** | Multi-repo technical docs | Developer documentation | Team knowledge base | Vue.js ecosystem docs |\\r\\n| **Content Format** | AsciiDoc only | Markdown + React/MDX | Markdown + blocks | Markdown + Vue |\\r\\n| **Learning Curve** | Steep (new concepts + AsciiDoc) | Moderate (familiar React patterns) | Easy (WYSIWYG + Markdown) | Moderate (Vue knowledge helpful) |\\r\\n| **Multi-Version Support** | Excellent (built-in, sophisticated) | Good (built-in versioning) | Limited (manual organization) | Manual implementation required |\\r\\n| **Multi-Repository** | Native support (core feature) | Single repo only | Single workspace model | Single repo focus |\\r\\n| **Cross-References** | Powerful (cross-component/version) | Basic (within single repo) | Good (within workspace) | Basic linking |\\r\\n| **Content Reuse** | Advanced (includes, partials, attributes) | Limited (MDX components) | Basic (snippets, templates) | Limited (Vue components) |\\r\\n| **Team Collaboration** | Excellent (distributed teams, Git-native) | Good (GitHub integration) | Excellent (real-time editing) | Good (Git-based) |\\r\\n| **Setup Complexity** | High (playbooks, components, modules) | Low (npm create, config file) | Very low (web interface) | Low (Vue CLI or manual) |\\r\\n| **Build Performance** | Can be slow (multi-repo aggregation) | Fast (optimized for speed) | Fast (cloud-based) | Very fast (Vite/modern tooling) |\\r\\n| **Theming/Customization** | Limited themes, complex customization | Many themes, React-based custom | Limited (premium plans for custom) | Flexible (Vue-based theming) |\\r\\n| **Plugin Ecosystem** | Small, specialized | Large, active community | Growing but limited | Good (Vue ecosystem) |\\r\\n| **Search Integration** | Good (Lunr, external options) | Excellent (Algolia built-in) | Excellent (built-in) | Good (built-in + external) |\\r\\n| **Hosting Options** | Flexible (any static host) | Flexible (Netlify, Vercel, etc.) | Managed hosting included | Flexible (any static host) |\\r\\n| **Community Size** | Small, niche | Large, active (Facebook/Meta) | Large, growing | Medium (Vue community) |\\r\\n| **Documentation Quality** | Comprehensive but complex | Excellent, beginner-friendly | Excellent, user-friendly | Good, Vue-focused |\\r\\n| **Mobile Experience** | Good (responsive default theme) | Excellent (optimized) | Excellent (native apps) | Good (responsive) |\\r\\n| **Real-time Features** | None (static only) | Limited (comments via plugins) | Real-time editing, comments | None (static only) |\\r\\n| **Content Management** | Git-only (technical users) | Git-based (some CMS integrations) | Web-based editor | Git-based |\\r\\n| **Internationalization** | Good (attribute-based) | Excellent (built-in i18n) | Good (multi-language spaces) | Good (Vue i18n integration) |\\r\\n| **Cost** | Free (open source) | Free (open source) | Free tier limited, paid plans | Free (open source) |\\r\\n\\r\\n### Decision Framework\\r\\n\\r\\n**Choose Antora if:**\\r\\n- Multi-repository documentation is essential\\r\\n- Team can invest in learning AsciiDoc\\r\\n- Large-scale documentation challenges\\r\\n\\r\\n**Choose Docusaurus if:**\\r\\n- Single repository setup is sufficient\\r\\n- Developer-focused documentation\\r\\n- Need proven, widely-adopted solution\\r\\n\\r\\n**Choose GitBook if:**\\r\\n- Non-technical team members need to contribute\\r\\n- Real-time collaboration is important\\r\\n- Managed solution preferred over self-hosting\\r\\n\\r\\n**Choose VuePress/VitePress if:**\\r\\n- Build speed is critical\\r\\n- Flexible theming requirements\\r\\n- Technical team comfortable with Vue\\r\\n\\r\\n## One last thing\\r\\n\\r\\nIf you\'re running a relatively small tech document team with a single product, I\'d suggest looking at tools, such as Docusaurus, Hugo, Sphinx, and Github Pages. This will allow you get started with publishing your tech docs. \\r\\n\\r\\nOnce comfortable with the process, you can then look at more complex workflows. \\r\\n\\r\\nIn the coming weeks, I\'ll go into more depth about how to setup a tech document website, tool usage, metrics and common pitfalls to avoid.\\r\\n\\r\\nAs always, drop me a line if you\'d like to know more. My inbox is always open."},{"id":"oliver-burkeman","metadata":{"permalink":"/blog/oliver-burkeman","source":"@site/blog/2025-01-02-oliver-burkeman-book-review.md","title":"Oliver Burkeman Book Review","description":"Review Oliver Burkeman book review","date":"2025-01-02T00:00:00.000Z","tags":[{"inline":false,"label":"AI","permalink":"/blog/tags/ai","description":"Posts related to Artificial Intelligence."}],"readingTime":0.06,"hasTruncateMarker":true,"authors":[{"name":"Ivan Walsh","title":"Technical Writer","url":"https://github.com/ivanwalsh","page":{"permalink":"/blog/authors/ivanwalsh"},"socials":{"x":"https://x.com/ivanwalsh","github":"https://github.com/ivanwalsh"},"imageURL":"https://github.com/ivanwalsh.png","key":"ivanwalsh"}],"frontMatter":{"slug":"oliver-burkeman","title":"Oliver Burkeman Book Review","authors":["ivanwalsh"],"tags":["AI"],"description":"Review Oliver Burkeman book review"},"unlisted":false,"prevItem":{"title":"Using Antora to Manage Complex Technical Documentation Websites","permalink":"/blog/antora-setup"},"nextItem":{"title":"Google Notebook Primer","permalink":"/blog/google-notebook"}},"content":"Review Oliver Burkeman book review\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\nReview Oliver Burkeman book review"},{"id":"google-notebook","metadata":{"permalink":"/blog/google-notebook","source":"@site/blog/2025-01-01-google-notebooklm.md","title":"Google Notebook Primer","description":"A beginner\'s guide to using Google Notebook for AI projects.","date":"2025-01-01T00:00:00.000Z","tags":[{"inline":false,"label":"AI","permalink":"/blog/tags/ai","description":"Posts related to Artificial Intelligence."},{"inline":false,"label":"Google","permalink":"/blog/tags/google","description":"Posts related to Google."},{"inline":false,"label":"Google NotebookLM","permalink":"/blog/tags/google-notebook-lm","description":"Posts related to Google NotebookLM."}],"readingTime":0.36,"hasTruncateMarker":true,"authors":[{"name":"Ivan Walsh","title":"Technical Writer","url":"https://github.com/ivanwalsh","page":{"permalink":"/blog/authors/ivanwalsh"},"socials":{"x":"https://x.com/ivanwalsh","github":"https://github.com/ivanwalsh"},"imageURL":"https://github.com/ivanwalsh.png","key":"ivanwalsh"}],"frontMatter":{"slug":"google-notebook","title":"Google Notebook Primer","authors":["ivanwalsh"],"tags":["AI","Google","Google NotebookLM"],"description":"A beginner\'s guide to using Google Notebook for AI projects."},"unlisted":false,"prevItem":{"title":"Oliver Burkeman Book Review","permalink":"/blog/oliver-burkeman"}},"content":"This is the summary of a post about Google NotebookLM,\\r\\n\\r\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}}')}}]);